plugins {
    id "com.gradle.plugin-publish" version "0.10.1"
    id 'groovy'
    id 'java-library'
}

apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.github.prokod'
version = '0.1.0'

repositories {
    jcenter()
}

description 'Provides a task similar to Tar and Zip for constructing RPM and DEB package files.'

compileGroovy.groovyOptions.configurationScript = file('src/groovyCompile/groovycConfig.groovy')

configurations.all {
    resolutionStrategy {
        force 'org.bouncycastle:bcpg-jdk15on:1.62'
    }
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation 'org.apache.commons:commons-lang3:3.9'
    api('org.redline-rpm:redline:1.2.9') {
        // Where logging goes is a runtime decision
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    api('org.vafer:jdeb:1.8') {
        // Individual listing so that they translate into the pom file
        exclude group: 'org.apache.maven', module: 'maven-core'
        exclude group: 'org.apache.maven', module: 'maven-plugin-api'
        exclude group: 'org.apache.maven', module: 'maven-project'
        exclude group: 'org.apache.maven', module: 'maven-artifact'
        exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
    }

    implementation 'com.bmuschko:gradle-docker-plugin:3.2.1'

    testCompile 'com.netflix.nebula:nebula-test:latest.release'
}

def javaApiUrl = 'http://docs.oracle.com/javase/1.6.0/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
    options.links(javaApiUrl, groovyApiUrl)
}

test {
    maxHeapSize = '384m'
}

pluginBundle {
    plugins {
        rpmBuild {
            id = 'com.github.prokod.rpm-build'
            displayName = 'RPM Build Plugin'
            description = 'Create RPM packages. Based on Nebula RPM plugin'
            tags = ['rpm', 'centos', 'yum']
        }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    required { isReleaseVersion  && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives.repositories.mavenDeployer {
    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
    }

    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
    }

    pom.project {
        name 'Gradle RPM build plugin'
        packaging 'jar'
        description 'Gradle RPM packaging build plugin'
        url 'https://github.com/prokod/'
        inceptionYear '2020'

        scm {
            developerConnection 'git@github.com:prokod/gradle-crossbuild-scala.git'
            connection 'git://github.com/prokod/gradle-crossbuild-scala.git'
            url 'https://github.com/prokod/gradle-crossbuild-scala'
        }

        licenses {
            license {
                name 'Apache License 2.0'
                url 'https://www.apache.org/licenses/LICENSE-2.0'
            }
        }
        developers {
            developer {
                id 'noamasor'
                name 'Noam Asor'
                email 'noamas@gmail.com'
            }
        }
    }
}
